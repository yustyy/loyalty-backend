package com.ibw.skylab.loyaltybackend;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.0.
 */
@SuppressWarnings("rawtypes")
public class ProductNFT extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b506040518060400160405280600981526020017f436f636120436f6c6100000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f434f434100000000000000000000000000000000000000000000000000000000815250815f908161008a91906103c2565b50806001908161009a91906103c2565b5050506100b96100ae6100be60201b60201c565b6100c560201b60201c565b610491565b5f33905090565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061020357607f821691505b602082108103610216576102156101bf565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026102787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261023d565b610282868361023d565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6102c66102c16102bc8461029a565b6102a3565b61029a565b9050919050565b5f819050919050565b6102df836102ac565b6102f36102eb826102cd565b848454610249565b825550505050565b5f90565b6103076102fb565b6103128184846102d6565b505050565b5b818110156103355761032a5f826102ff565b600181019050610318565b5050565b601f82111561037a5761034b8161021c565b6103548461022e565b81016020851015610363578190505b61037761036f8561022e565b830182610317565b50505b505050565b5f82821c905092915050565b5f61039a5f198460080261037f565b1980831691505092915050565b5f6103b2838361038b565b9150826002028217905092915050565b6103cb82610188565b67ffffffffffffffff8111156103e4576103e3610192565b5b6103ee82546101ec565b6103f9828285610339565b5f60209050601f83116001811461042a575f8415610418578287015190505b61042285826103a7565b865550610489565b601f1984166104388661021c565b5f5b8281101561045f5784890151825560018201915060208501945060208101905061043a565b8683101561047c5784890151610478601f89168261038b565b8355505b6001600288020188555050505b505050505050565b6136f88061049e5f395ff3fe608060405234801561000f575f80fd5b506004361061011f575f3560e01c8063715018a6116100ab578063a22cb4651161006f578063a22cb46514610307578063b88d4fde14610323578063c87b56dd1461033f578063e985e9c51461036f578063f2fde38b1461039f5761011f565b8063715018a61461027157806375794a3c1461027b57806379a85e6c146102995780638da5cb5b146102cb57806395d89b41146102e95761011f565b806323b872dd116100f257806323b872dd146101bd578063387566d6146101d957806342842e0e146101f55780636352211e1461021157806370a08231146102415761011f565b806301ffc9a71461012357806306fdde0314610153578063081812fc14610171578063095ea7b3146101a1575b5f80fd5b61013d60048036038101906101389190611f17565b6103bb565b60405161014a9190611f5c565b60405180910390f35b61015b61049c565b6040516101689190611fe5565b60405180910390f35b61018b60048036038101906101869190612038565b61052b565b60405161019891906120a2565b60405180910390f35b6101bb60048036038101906101b691906120e5565b61056d565b005b6101d760048036038101906101d29190612123565b610683565b005b6101f360048036038101906101ee91906122d5565b61069b565b005b61020f600480360381019061020a9190612123565b61074d565b005b61022b60048036038101906102269190612038565b610765565b60405161023891906120a2565b60405180910390f35b61025b60048036038101906102569190612371565b6107e9565b60405161026891906123ab565b60405180910390f35b61027961089d565b005b6102836108b0565b60405161029091906123ab565b60405180910390f35b6102b360048036038101906102ae9190612038565b6108b6565b6040516102c2939291906123d3565b60405180910390f35b6102d3610a78565b6040516102e091906120a2565b60405180910390f35b6102f1610aa0565b6040516102fe9190611fe5565b60405180910390f35b610321600480360381019061031c9190612440565b610b30565b005b61033d6004803603810190610338919061251c565b610b46565b005b61035960048036038101906103549190612038565b610b60565b6040516103669190611fe5565b60405180910390f35b6103896004803603810190610384919061259c565b610d7c565b6040516103969190611f5c565b60405180910390f35b6103b960048036038101906103b49190612371565b610e0a565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061048557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610495575061049482610e8c565b5b9050919050565b60605f80546104aa90612607565b80601f01602080910402602001604051908101604052809291908181526020018280546104d690612607565b80156105215780601f106104f857610100808354040283529160200191610521565b820191905f5260205f20905b81548152906001019060200180831161050457829003601f168201915b5050505050905090565b5f61053582610ef5565b60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f61057782610765565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105de906126a7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610606610f40565b73ffffffffffffffffffffffffffffffffffffffff16148061063557506106348161062f610f40565b610d7c565b5b610674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b90612735565b60405180910390fd5b61067e8383610f47565b505050565b61068b610ffd565b61069683838361107b565b505050565b6106a3610ffd565b5f60075490506106b385826110db565b60405180606001604052808581526020018481526020018360ff1681525060085f8381526020019081526020015f205f820151815f0190816106f591906128f0565b50602082015181600101908161070b91906128f0565b506040820151816002015f6101000a81548160ff021916908360ff16021790555090505060075f815480929190610741906129ec565b91905055505050505050565b610755610ffd565b6107608383836110f8565b505050565b5f8061077083611117565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d790612a7d565b60405180910390fd5b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f90612b0b565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6108a5610ffd565b6108ae5f611150565b565b60075481565b6060805f6108c384611213565b610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990612b99565b60405180910390fd5b5f60085f8681526020019081526020015f206040518060600160405290815f8201805461092e90612607565b80601f016020809104026020016040519081016040528092919081815260200182805461095a90612607565b80156109a55780601f1061097c576101008083540402835291602001916109a5565b820191905f5260205f20905b81548152906001019060200180831161098857829003601f168201915b505050505081526020016001820180546109be90612607565b80601f01602080910402602001604051908101604052809291908181526020018280546109ea90612607565b8015610a355780601f10610a0c57610100808354040283529160200191610a35565b820191905f5260205f20905b815481529060010190602001808311610a1857829003601f168201915b50505050508152602001600282015f9054906101000a900460ff1660ff1660ff16815250509050805f015181602001518260400151935093509350509193909250565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610aaf90612607565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb90612607565b8015610b265780601f10610afd57610100808354040283529160200191610b26565b820191905f5260205f20905b815481529060010190602001808311610b0957829003601f168201915b5050505050905090565b610b42610b3b610f40565b8383611253565b5050565b610b4e610ffd565b610b5a848484846113ba565b50505050565b6060610b6b82611213565b610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba190612c27565b60405180910390fd5b5f60085f8481526020019081526020015f206040518060600160405290815f82018054610bd690612607565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0290612607565b8015610c4d5780601f10610c2457610100808354040283529160200191610c4d565b820191905f5260205f20905b815481529060010190602001808311610c3057829003601f168201915b50505050508152602001600182018054610c6690612607565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9290612607565b8015610cdd5780601f10610cb457610100808354040283529160200191610cdd565b820191905f5260205f20905b815481529060010190602001808311610cc057829003601f168201915b50505050508152602001600282015f9054906101000a900460ff1660ff1660ff168152505090505f610d51610d118561141c565b835f01518460200151610d2a866040015160ff1661141c565b604051602001610d3d9493929190612ed1565b60405160208183030381529060405261159a565b905080604051602001610d649190612fbb565b60405160208183030381529060405292505050919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b610e12610ffd565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e779061304c565b60405180910390fd5b610e8981611150565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610efe81611213565b610f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3490612a7d565b60405180910390fd5b50565b5f33905090565b8160045f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610fb783610765565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611005610f40565b73ffffffffffffffffffffffffffffffffffffffff16611023610a78565b73ffffffffffffffffffffffffffffffffffffffff1614611079576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611070906130b4565b60405180910390fd5b565b61108c611086610f40565b8261170d565b6110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c290613142565b60405180910390fd5b6110d683838361174c565b505050565b6110f4828260405180602001604052805f815250611a38565b5050565b61111283838360405180602001604052805f815250610b46565b505050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f8073ffffffffffffffffffffffffffffffffffffffff1661123483611117565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b8906131aa565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113ad9190611f5c565b60405180910390a3505050565b6113cb6113c5610f40565b8361170d565b61140a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140190613142565b60405180910390fd5b61141684848484611a92565b50505050565b60605f8203611462576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611595565b5f8290505f5b5f821461149157808061147a906129ec565b915050600a8261148a91906131f5565b9150611468565b5f8167ffffffffffffffff8111156114ac576114ab61217b565b5b6040519080825280601f01601f1916602001820160405280156114de5781602001600182028036833780820191505090505b5090505f8290505b5f861461158d576001816114fa9190613225565b90505f600a808861150b91906131f5565b6115159190613258565b876115209190613225565b603061152c9190613299565b90505f8160f81b905080848481518110611549576115486132cd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a8861158491906131f5565b975050506114e6565b819450505050505b919050565b60605f8251036115ba5760405180602001604052805f8152509050611708565b5f6040518060600160405280604081526020016136836040913990505f6003600285516115e791906132fa565b6115f191906131f5565b60046115fd9190613258565b90505f60208261160d91906132fa565b67ffffffffffffffff8111156116265761162561217b565b5b6040519080825280601f01601f1916602001820160405280156116585781602001600182028036833780820191505090505b509050818152600183018586518101602084015b818310156116c7576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182536001820191505061166c565b6003895106600181146116e157600281146116f1576116fc565b613d3d60f01b60028303526116fc565b603d60f81b60018303525b50505050508093505050505b919050565b5f8273ffffffffffffffffffffffffffffffffffffffff1661172d610a78565b73ffffffffffffffffffffffffffffffffffffffff1614905092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661176c82610765565b73ffffffffffffffffffffffffffffffffffffffff16146117c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b99061339d565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611830576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118279061342b565b60405180910390fd5b61183d8383836001611aee565b8273ffffffffffffffffffffffffffffffffffffffff1661185d82610765565b73ffffffffffffffffffffffffffffffffffffffff16146118b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118aa9061339d565b60405180910390fd5b60045f8281526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540392505081905550600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a338383836001611af4565b505050565b611a428383611afa565b611a4e5f848484611d0d565b611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a84906134b9565b60405180910390fd5b505050565b611a9d84848461174c565b611aa984848484611d0d565b611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf906134b9565b60405180910390fd5b50505050565b50505050565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5f90613521565b60405180910390fd5b611b7181611213565b15611bb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba890613589565b60405180910390fd5b611bbe5f83836001611aee565b611bc781611213565b15611c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfe90613589565b60405180910390fd5b600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611d095f83836001611af4565b5050565b5f611d2d8473ffffffffffffffffffffffffffffffffffffffff16611e8f565b15611e82578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611d56610f40565b8786866040518563ffffffff1660e01b8152600401611d7894939291906135f9565b6020604051808303815f875af1925050508015611db357506040513d601f19601f82011682018060405250810190611db09190613657565b60015b611e32573d805f8114611de1576040519150601f19603f3d011682016040523d82523d5f602084013e611de6565b606091505b505f815103611e2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e21906134b9565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611e87565b600190505b949350505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ef681611ec2565b8114611f00575f80fd5b50565b5f81359050611f1181611eed565b92915050565b5f60208284031215611f2c57611f2b611eba565b5b5f611f3984828501611f03565b91505092915050565b5f8115159050919050565b611f5681611f42565b82525050565b5f602082019050611f6f5f830184611f4d565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611fb782611f75565b611fc18185611f7f565b9350611fd1818560208601611f8f565b611fda81611f9d565b840191505092915050565b5f6020820190508181035f830152611ffd8184611fad565b905092915050565b5f819050919050565b61201781612005565b8114612021575f80fd5b50565b5f813590506120328161200e565b92915050565b5f6020828403121561204d5761204c611eba565b5b5f61205a84828501612024565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61208c82612063565b9050919050565b61209c81612082565b82525050565b5f6020820190506120b55f830184612093565b92915050565b6120c481612082565b81146120ce575f80fd5b50565b5f813590506120df816120bb565b92915050565b5f80604083850312156120fb576120fa611eba565b5b5f612108858286016120d1565b925050602061211985828601612024565b9150509250929050565b5f805f6060848603121561213a57612139611eba565b5b5f612147868287016120d1565b9350506020612158868287016120d1565b925050604061216986828701612024565b9150509250925092565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6121b182611f9d565b810181811067ffffffffffffffff821117156121d0576121cf61217b565b5b80604052505050565b5f6121e2611eb1565b90506121ee82826121a8565b919050565b5f67ffffffffffffffff82111561220d5761220c61217b565b5b61221682611f9d565b9050602081019050919050565b828183375f83830152505050565b5f61224361223e846121f3565b6121d9565b90508281526020810184848401111561225f5761225e612177565b5b61226a848285612223565b509392505050565b5f82601f83011261228657612285612173565b5b8135612296848260208601612231565b91505092915050565b5f60ff82169050919050565b6122b48161229f565b81146122be575f80fd5b50565b5f813590506122cf816122ab565b92915050565b5f805f80608085870312156122ed576122ec611eba565b5b5f6122fa878288016120d1565b945050602085013567ffffffffffffffff81111561231b5761231a611ebe565b5b61232787828801612272565b935050604085013567ffffffffffffffff81111561234857612347611ebe565b5b61235487828801612272565b9250506060612365878288016122c1565b91505092959194509250565b5f6020828403121561238657612385611eba565b5b5f612393848285016120d1565b91505092915050565b6123a581612005565b82525050565b5f6020820190506123be5f83018461239c565b92915050565b6123cd8161229f565b82525050565b5f6060820190508181035f8301526123eb8186611fad565b905081810360208301526123ff8185611fad565b905061240e60408301846123c4565b949350505050565b61241f81611f42565b8114612429575f80fd5b50565b5f8135905061243a81612416565b92915050565b5f806040838503121561245657612455611eba565b5b5f612463858286016120d1565b92505060206124748582860161242c565b9150509250929050565b5f67ffffffffffffffff8211156124985761249761217b565b5b6124a182611f9d565b9050602081019050919050565b5f6124c06124bb8461247e565b6121d9565b9050828152602081018484840111156124dc576124db612177565b5b6124e7848285612223565b509392505050565b5f82601f83011261250357612502612173565b5b81356125138482602086016124ae565b91505092915050565b5f805f806080858703121561253457612533611eba565b5b5f612541878288016120d1565b9450506020612552878288016120d1565b935050604061256387828801612024565b925050606085013567ffffffffffffffff81111561258457612583611ebe565b5b612590878288016124ef565b91505092959194509250565b5f80604083850312156125b2576125b1611eba565b5b5f6125bf858286016120d1565b92505060206125d0858286016120d1565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061261e57607f821691505b602082108103612631576126306125da565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f612691602183611f7f565b915061269c82612637565b604082019050919050565b5f6020820190508181035f8301526126be81612685565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f5f8201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b5f61271f603d83611f7f565b915061272a826126c5565b604082019050919050565b5f6020820190508181035f83015261274c81612713565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026127af7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612774565b6127b98683612774565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6127f46127ef6127ea84612005565b6127d1565b612005565b9050919050565b5f819050919050565b61280d836127da565b612821612819826127fb565b848454612780565b825550505050565b5f90565b612835612829565b612840818484612804565b505050565b5b81811015612863576128585f8261282d565b600181019050612846565b5050565b601f8211156128a85761287981612753565b61288284612765565b81016020851015612891578190505b6128a561289d85612765565b830182612845565b50505b505050565b5f82821c905092915050565b5f6128c85f19846008026128ad565b1980831691505092915050565b5f6128e083836128b9565b9150826002028217905092915050565b6128f982611f75565b67ffffffffffffffff8111156129125761291161217b565b5b61291c8254612607565b612927828285612867565b5f60209050601f831160018114612958575f8415612946578287015190505b61295085826128d5565b8655506129b7565b601f19841661296686612753565b5f5b8281101561298d57848901518255600182019150602085019450602081019050612968565b868310156129aa57848901516129a6601f8916826128b9565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6129f682612005565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a2857612a276129bf565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e20494400000000000000005f82015250565b5f612a67601883611f7f565b9150612a7282612a33565b602082019050919050565b5f6020820190508181035f830152612a9481612a5b565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f7420612076615f8201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b5f612af5602983611f7f565b9150612b0082612a9b565b604082019050919050565b5f6020820190508181035f830152612b2281612ae9565b9050919050565b7f4552433732314d657461646174613a20517565727920666f72206e6f6e6578695f8201527f7374656e7420746f6b656e000000000000000000000000000000000000000000602082015250565b5f612b83602b83611f7f565b9150612b8e82612b29565b604082019050919050565b5f6020820190508181035f830152612bb081612b77565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f5f8201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b5f612c11602f83611f7f565b9150612c1c82612bb7565b604082019050919050565b5f6020820190508181035f830152612c3e81612c05565b9050919050565b5f81905092915050565b7f7b226e616d65223a202250726f64756374204e465420230000000000000000005f82015250565b5f612c83601783612c45565b9150612c8e82612c4f565b601782019050919050565b5f612ca382611f75565b612cad8185612c45565b9350612cbd818560208601611f8f565b80840191505092915050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f612cfd600283612c45565b9150612d0882612cc9565b600282019050919050565b7f226465736372697074696f6e223a202254686973204e465420726570726573655f8201527f6e7473206120756e697175652070726f647563742066726f6d2074686520636f60208201527f6c6c656374696f6e2e0000000000000000000000000000000000000000000000604082015250565b5f612d93604983612c45565b9150612d9e82612d13565b604982019050919050565b7f226d616e75666163747572655f64617465223a202200000000000000000000005f82015250565b5f612ddd601583612c45565b9150612de882612da9565b601582019050919050565b7f22636f6c6c656374696f6e5f6e616d65223a20220000000000000000000000005f82015250565b5f612e27601483612c45565b9150612e3282612df3565b601482019050919050565b7f227261726974795f70657263656e74616765223a2022000000000000000000005f82015250565b5f612e71601683612c45565b9150612e7c82612e3d565b601682019050919050565b7f25227d00000000000000000000000000000000000000000000000000000000005f82015250565b5f612ebb600383612c45565b9150612ec682612e87565b600382019050919050565b5f612edb82612c77565b9150612ee78287612c99565b9150612ef282612cf1565b9150612efd82612d87565b9150612f0882612dd1565b9150612f148286612c99565b9150612f1f82612cf1565b9150612f2a82612e1b565b9150612f368285612c99565b9150612f4182612cf1565b9150612f4c82612e65565b9150612f588284612c99565b9150612f6382612eaf565b915081905095945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000005f82015250565b5f612fa5601d83612c45565b9150612fb082612f71565b601d82019050919050565b5f612fc582612f99565b9150612fd18284612c99565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f613036602683611f7f565b915061304182612fdc565b604082019050919050565b5f6020820190508181035f8301526130638161302a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f61309e602083611f7f565b91506130a98261306a565b602082019050919050565b5f6020820190508181035f8301526130cb81613092565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e655f8201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b5f61312c602d83611f7f565b9150613137826130d2565b604082019050919050565b5f6020820190508181035f83015261315981613120565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000005f82015250565b5f613194601983611f7f565b915061319f82613160565b602082019050919050565b5f6020820190508181035f8301526131c181613188565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6131ff82612005565b915061320a83612005565b92508261321a576132196131c8565b5b828204905092915050565b5f61322f82612005565b915061323a83612005565b9250828203905081811115613252576132516129bf565b5b92915050565b5f61326282612005565b915061326d83612005565b925082820261327b81612005565b91508282048414831517613292576132916129bf565b5b5092915050565b5f6132a38261229f565b91506132ae8361229f565b9250828201905060ff8111156132c7576132c66129bf565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f61330482612005565b915061330f83612005565b9250828201905080821115613327576133266129bf565b5b92915050565b7f4552433732313a207472616e736665722066726f6d20696e636f7272656374205f8201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b5f613387602583611f7f565b91506133928261332d565b604082019050919050565b5f6020820190508181035f8301526133b48161337b565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f613415602483611f7f565b9150613420826133bb565b604082019050919050565b5f6020820190508181035f83015261344281613409565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e2045524337323152655f8201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b5f6134a3603283611f7f565b91506134ae82613449565b604082019050919050565b5f6020820190508181035f8301526134d081613497565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f20616464726573735f82015250565b5f61350b602083611f7f565b9150613516826134d7565b602082019050919050565b5f6020820190508181035f830152613538816134ff565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e746564000000005f82015250565b5f613573601c83611f7f565b915061357e8261353f565b602082019050919050565b5f6020820190508181035f8301526135a081613567565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f6135cb826135a7565b6135d581856135b1565b93506135e5818560208601611f8f565b6135ee81611f9d565b840191505092915050565b5f60808201905061360c5f830187612093565b6136196020830186612093565b613626604083018561239c565b818103606083015261363881846135c1565b905095945050505050565b5f8151905061365181611eed565b92915050565b5f6020828403121561366c5761366b611eba565b5b5f61367984828501613643565b9150509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220bbdde9d179099318541a5064ee2b86a75eb5b57b1b03259bcc2dd8f37a9a91cf64736f6c634300081a0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETPRODUCTINFO = "getProductInfo";

    public static final String FUNC_İSAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MİNT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NEXTTOKENID = "nextTokenId";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHİP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHİP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHİPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected ProductNFT(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProductNFT(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProductNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProductNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHİPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHİPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHİPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<String, String, BigInteger>> getProductInfo(
            BigInteger tokenId) {
        final Function function = new Function(FUNC_GETPRODUCTINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, BigInteger>>(function,
                new Callable<Tuple3<String, String, BigInteger>>() {
                    @Override
                    public Tuple3<String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_İSAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, String manufactureDate,
            String collectionName, BigInteger rarityPercentage) {
        final Function function = new Function(
                FUNC_MİNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Utf8String(manufactureDate), 
                new org.web3j.abi.datatypes.Utf8String(collectionName), 
                new org.web3j.abi.datatypes.generated.Uint8(rarityPercentage)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nextTokenId() {
        final Function function = new Function(FUNC_NEXTTOKENID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHİP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] _data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHİP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ProductNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProductNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProductNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new ProductNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProductNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProductNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ProductNFT> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductNFT.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<ProductNFT> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductNFT.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<ProductNFT> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductNFT.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<ProductNFT> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductNFT.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
